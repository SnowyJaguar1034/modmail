version: "3"
name: backend-stack
networks:
  postgres:
    driver: bridge
    name: postgres
  private:
    driver: bridge
    name: private
  public:
    name: public
    driver: bridge

services:
  postgres:
    container_name: postgres
    image: postgres
    env_file: backend.env
    environment:
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES:-modmail}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/multi-postgres
      - ${PWD}/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - ${PGADMIN_PORT:-5050}:80
    networks:
      - postgres
      - public
    restart: unless-stopped

  logviewer:
    build:
      context: ..
      dockerfile: docker/web/Dockerfile
    image: chamburr/modmail-web:latest
    container_name: logviewer
    networks:
      - private
      - public
    restart: unless-stopped
    #    volumes:
    #      - logviewer
    ports:
      - ${EXTERNAL_WEB_PORT:-6060}:6000
    env_file: backend.env
    environment:
      - BASE_URI=${BASE_URI}
      - HTTP_HOST=${HTTP_HOST:-0.0.0.0}
      - HTTP_PORT=${INTERANL_HTTP_PORT:-6000}:6000
      - API_HOST=logviewer
      - API_PORT=${INTERNAL_API_PORT:-6001}
    depends_on:
      - logfetcher

  logfetcher:
    build:
      context: ..
      dockerfile: docker/api/Dockerfile
    image: chamburr/modmail-api:latest
    container_name: logfetcher
    networks:
      - private
    restart: unless-stopped
    #    volumes:
    #      - logfetcher
    env_file: backend.env
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - BOT_CLIENT_ID=${BOT_CLIENT_ID}
      - BOT_CLIENT_SECRET=${BOT_CLIENT_SECRET}
      - MAIN_SERVER=0
      - PREMIUM1_ROLE=0
      - PREMIUM3_ROLE=0
      - PREMIUM5_ROLE=0
      - PAYMENT_CHANNEL=0
      - PATRON_CHANNEL=0
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BASE_URI=${BASE_URI}
      - API_HOST=${HTTP_HOST:-0.0.0.0}
      - API_PORT=${INTERNAL_API_PORT:-6001}
      - API_WORKERS=1
      - API_SECRET=${API_SECRET}
      - BOT_API_HOST=${BOT_API_HOST}
      - BOT_API_PORT=${BOT_API_PORT}
    depends_on:
      - cache

  cache:
    image: redis:7-alpine
    restart: unless-stopped
    container_name: ${REDIS_HOST}
    env_file: backend.env
    volumes:
      - cache:/data
    networks:
      - private

  npm:
    image: "jc21/nginx-proxy-manager:latest"
    restart: unless-stopped
    container_name: nginx-proxy-manager
    env_file: backend.env
    networks:
      - public
    ports:
      # These ports are in format <host-port>:<container-port>
      - ${NPM_HTTP_PORT:-80}:80 # Public HTTP Port
      - ${NPM_HTTPS_PORT:-443}:443 # Public HTTPS Port
      - ${NPM_HTTP_PORT:-81}:81 # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    # Uncomment the next line if you uncomment anything in the section
    # environment:
    # Uncomment this if you want to change the location of
    # the SQLite DB file within the container
    # DB_SQLITE_FILE: "/data/database.sqlite"
    # Uncomment this if IPv6 is not enabled on your host
    # - DISABLE_IPV6: 'true'
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt

  goaccess:
    image: "xavierh/goaccess-for-nginxproxymanager:latest"
    container_name: goaccess
    restart: unless-stopped
    networks:
      - public
    env_file: backend.env
    environment:
      - TZ=${NPM_TIMEZONE}
    ports:
      - ${GOACCESS_PORT:-7880}:7880
    volumes:
      - goaccess_log:/opt/log
      - goaccess_custom:/opt/custom

volumes:
  postgres:
    name: postgres
  pgadmin:
    name: pgadmin
  npm_data:
    name: npm_data
  npm_letsencrypt:
    name: npm_letsencrypt
  goaccess_log:
    name: goaccess_log
  goaccess_custom:
    name: goaccess_custom
  cache:
    name: cache
  logfetcher:
    name: logfetcher
  logviewer:
    name: logviewer
